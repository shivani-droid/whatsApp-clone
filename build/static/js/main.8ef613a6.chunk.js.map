{"version":3,"sources":["firebase.js","components/Chats.js","StateProvider.js","components/Sidebar.js","components/ChatRoom.js","reducer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","database","firestore","authentication","auth","provider","GoogleAuthProvider","Chats","addChat","id","name","useState","avatars","setavatars","messages","setmessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","chatName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setrooms","user","unsubsctibe","photoURL","placeholder","type","room","key","ChatRoom","input","setinput","roomid","useParams","roomname","setroomname","Date","length","timestamp","toDate","toUTCString","displayName","onChange","event","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ef613a6.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDm_x-NttrvvIrievJvCmF_attwznAqsl0\",\n  authDomain: \"whatsapp-clone-902cf.firebaseapp.com\",\n  projectId: \"whatsapp-clone-902cf\",\n  storageBucket: \"whatsapp-clone-902cf.appspot.com\",\n  messagingSenderId: \"490675799982\",\n  appId: \"1:490675799982:web:d8d75afca4e9b655362a3f\",\n  measurementId: \"G-Q2WE192K61\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst database = firebaseApp.firestore();\nconst authentication = firebaseApp.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { database, authentication, provider };\n","import React, { useEffect, useState } from \"react\";\nimport \"./Chats.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { database } from \"../firebase\";\nimport { Link } from \"react-router-dom\";\n\nfunction Chats({ addChat, id, name }) {\n  const [avatars, setavatars] = useState(\"\");\n  const [messages, setmessages] = useState(\"\");\n\n  useEffect(() => {\n    setavatars(Math.floor(Math.random() * 5000));\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      database\n        .collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setmessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [id]);\n\n  const addnewChat = () => {\n    const chatName = prompt(\"Enter A name\");\n\n    if (chatName) {\n      database.collection(\"rooms\").add({\n        name: chatName,\n      });\n    }\n  };\n\n  return !addChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"chats\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${avatars}.svg`} />\n        <div className=\"chats__info\">\n          <h3>{name}</h3>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={addnewChat} className=\"chats\">\n      <h2>Add New Chat</h2>\n    </div>\n  );\n}\n\nexport default Chats;\n","import React, { createContext, useReducer, useContext } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Chats from \"./Chats\";\nimport { database } from \"../firebase\";\nimport { useStateValue } from \"../StateProvider\";\nfunction Sidebar() {\n  const [rooms, setrooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const unsubsctibe = database.collection(\"rooms\").onSnapshot((snapshot) =>\n      setrooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n\n    return () => {\n      unsubsctibe();\n    };\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={user?.photoURL} />\n        <div className=\"sidebar__headerright\">\n          <DonutLargeIcon />\n          <ChatIcon />\n          <MoreVertIcon />\n        </div>\n      </div>\n      <div className=\"siebar__search\">\n        <div className=\"sidebar__searchcontainer\">\n          <SearchIcon />\n          <input placeholder=\"chats\" type=\"text\" />\n        </div>\n      </div>\n\n      <div className=\"sidebar__chhatsGroups\">\n        <Chats addChat />\n        {rooms.map((room) => (\n          <Chats key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase\";\nimport \"./ChatRoom.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { useParams } from \"react-router-dom\";\nimport { database } from \"../firebase\";\nimport { useStateValue } from \"../StateProvider\";\nfunction ChatRoom() {\n  const [input, setinput] = useState(\"\");\n  const { roomid } = useParams();\n  const [roomname, setroomname] = useState(\"\");\n  const [message, setmessages] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (roomid) {\n      database\n        .collection(\"rooms\")\n        .doc(roomid)\n        .onSnapshot((snapshot) => setroomname(snapshot.data().name));\n      database\n        .collection(\"rooms\")\n        .doc(roomid)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) =>\n          setmessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [roomid]);\n\n  const SendMessage = (event) => {\n    event.preventDefault();\n\n    database.collection(\"rooms\").doc(roomid).collection(\"messages\").add({\n      message: input,\n      name: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setinput(\"\");\n  };\n\n  return (\n    <div className=\"chatroom\">\n      <div className=\"chatroom__header\">\n        <Avatar />\n        <div className=\"chatroom__headerinfoleft\">\n          <h3>{roomname}</h3>\n          <p>\n            last seen{\" \"}\n            {new Date(\n              message[message.length - 1]?.timestamp?.toDate()\n            ).toUTCString()}\n          </p>\n        </div>\n        <div className=\"chatroom__header__inforight\">\n          <SearchIcon />\n          <AttachFileIcon />\n          <MoreVertIcon />\n        </div>\n      </div>\n      <div className=\"chatroom__body\">\n        {message.map((message) => (\n          <p\n            className={`chatroom__message ${\n              message.name === user.displayName && `chatroom__messagerecierver`\n            }`}\n          >\n            <span className=\"chatroom__username\">{message.name}</span>\n            {message.message}\n            <span className=\"chatroom__messagetimestamp \">\n              {new Date(message.timestamp?.toDate()).toUTCString()}\n            </span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chatroom__footer\">\n        <SentimentVerySatisfiedIcon />\n        <form>\n          <input\n            value={input}\n            onChange={(event) => setinput(event.target.value)}\n            placeholder=\"Type your message here\"\n          />\n          <button onClick={SendMessage} type=\"submit\">\n            <SendIcon />\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default ChatRoom;\n","export const initialState = {\n  user: null,\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { authentication, provider } from \"../firebase\";\nimport { useStateValue } from \"../StateProvider\";\nimport { actionTypes } from \"../reducer\";\n\nfunction Login() {\n  const [{ user }, dispatch] = useStateValue();\n\n  const signIn = () => {\n    authentication\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__body\">\n        <img\n          alt=\"whats app logo\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/800px-WhatsApp.svg.png\"\n        />\n        <div className=\"login__text\">\n          <h1>Welcome To WhatsApp Clone</h1>\n        </div>\n\n        <Button onClick={signIn}>SignIn with Google</Button>\n      \n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Sidebar from \"./components/Sidebar\";\nimport ChatRoom from \"./components/ChatRoom\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__container\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomid\">\n                <ChatRoom />\n              </Route>\n              <Route path=\"/\">\n                <ChatRoom />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}